apply plugin: 'com.android.application'

// Load Jacoco Only if needed
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco build file: jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}

def carvedTestSrcDir = "src/allCarvedTest"


if (carvedTests.toBoolean()){
    if (project.hasProperty('testName')){
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""
        
        carvedTestSrcDir = "src/carvedTest/${testName}"
        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}

android {
    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests.toBoolean()) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }
        }
    }

    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.naseem.naseemashraf.memento2"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 3
        versionName "1.2"
        testInstrumentationRunner "com.naseem.naseemashraf.memento2.MockTestRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled jacocoEnabled.toBoolean()
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {

            // Nices output on the console/logs
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }

            test {
                ignoreFailures = true
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if ( carvedTests.toBoolean() ) {
                    // Just use the same?
                    reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                } 
                
                filter {
                    //specific test method
                    if (project.hasProperty('carvedTestsFilter')){
                        includeTestsMatching project.carvedTestsFilter
                    }
                }
            }
        }
    } 
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha05'

    //ROOM SQLite
    implementation 'androidx.room:room-runtime:2.2.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor 'androidx.room:room-compiler:2.2.5'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0'

    //Testing
    //Firebase Lab Tests
    implementation 'com.google.firebase:firebase-core:17.5.0'

    // Core library
    androidTestImplementation 'androidx.test:core:1.2.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'
    androidTestImplementation 'com.google.truth:truth:1.0.1'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.2.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.2.0'
    implementation 'androidx.test.espresso.idling:idling-concurrent:3.2.0'
    testImplementation 'junit:junit:4.13'

    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.robolectric:robolectric:4.5'
    testImplementation 'org.mockito:mockito-core:2.6.3'
    // Espresso/UI tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    // androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
}

apply plugin: 'com.google.gms.google-services'